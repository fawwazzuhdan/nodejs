#!/usr/bin/env node
/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');

const env = process.env.NODE_ENV || 'development';
const config = require('../config/config.json')[env];

const mongoose = require('mongoose');


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

mongoose.connect('mongodb://157.245.50.131:27017/nodejs', (err) => {
    if (err) {
        console.error('Error connecting to db: ', err);
    } else {
        console.info('Mongodb connection successful');
    }

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, function() {
        console.info('Express server listening on port ' + server.address().port);
    });
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      console.info('Listening on ' + bind);
}